
@using System
@using System.Linq
@using FluentSharp.CoreLib
@using TeamMentor.CoreLib

@{        
    var count = 0;
    var nameFilter    = HttpContextFactory.Request["nameFilter"];
    var emailFilter   = HttpContextFactory.Request["emailFilter"];    
    var orderBy       = HttpContextFactory.Request["orderBy"];    
    var userData = TM_UserData.Current;
    var allUsers = userData.tmUsers();
    var tmUsers  = (from user in allUsers
                    where nameFilter.notValid()  || user.UserName.regEx(nameFilter)
                    where emailFilter.notValid() || user.EMail.regEx(emailFilter)
                    select user).toList();;    
 
    switch(orderBy.lower())
    {
        case "email":
            tmUsers = tmUsers.OrderBy((user)=> user.EMail).toList();
            break;
        case "fullname":
            tmUsers = tmUsers.OrderBy((user)=> "{0} {1}".format(user.FirstName, user.LastName)).toList();
            break;            
        case "created":
            tmUsers = tmUsers.OrderBy((user)=> user.Stats.CreationDate).Reverse().toList();
            break;
        case "group":
            tmUsers = tmUsers.OrderBy((user)=> user.userGroup()).toList();
            break;
        case "status":
            tmUsers = tmUsers.OrderBy((user)=> user.userStatus()).toList();
            break;                    
        case "activities":
            tmUsers = tmUsers.OrderBy((user)=> user.UserActivities.size()).Reverse().toList();
            break;            
        case "sessions":
            tmUsers = tmUsers.OrderBy((user)=> user.Sessions.size()).Reverse().toList();
            break;            
        default:
            tmUsers = tmUsers.OrderBy((user)=> user.UserName).toList();
            break;
    }
    
    Func<string,string> orderBySelection =(value)=>
        {
            if (value==orderBy)
                return "selected";
            return "";        
        };
        
    Func<string,string> cssForUserGroup =(group)=>
        {             
            switch(group.lower())
            {
                case "admin":
                    return "danger";
                case "editor":
                    return "warning";
                case "reader":
                    return "primary";
            }
            return "info";
        };  
        
        
    Func<string,string> cssForUserStatus =(status)=>
        {             
            switch(status.lower())
            {
                case "account expired":
                    return "info";
                case "disabled":
                    return "danger";
                case "enabled":
                    return "success";
            }
            return "default";
        };          
}

<style>
    .alert-small {
                padding: 8px 8px 8px 15px;
                width  : 720px;
           }
</style>

<h4>Current users </h4>
       
<div class="alert alert-success alert-block alert-small">
    <form class="form-inline" action="Current_Users" method="get">
        <div class="form-group">
            Name:
            <input type="text" class="form-control" name="nameFilter" placeholder="filter regEx" value="@nameFilter">
        </div>
        <div class="form-group">
            Email:
            <input type="text" class="form-control" name="emailFilter" placeholder="filter regEx" value="@emailFilter">
        </div>        
        <div class="form-group">
            Sort By:
            <select name="orderBy" class="form-control">
                <option value="UserName"   @orderBySelection("UserName") >User Name</option>
                <option value="FullName"   @orderBySelection("FullName") >Full Name</option>
                <option value="Email"      @orderBySelection("Email")    >Email</option>
                <option value="Created"    @orderBySelection("Created")  >Created</option>
                <option value="Group"      @orderBySelection("Group")    >Group</option>
                <option value="Status"     @orderBySelection("Status")   >Status</option>
                <option value="Activities" @orderBySelection("Activites")>Activities</option>
                <option value="Sessions"   @orderBySelection("Sessions") >Sessions</option>
            </select>
        </div>

        <button type="submit" class="btn btn-default">filter</button>
        
    </form>             
</div>
<script>
   
    var tmUserData = [
        @foreach(var tmUser in tmUsers)
        {
            @: { "UserName"   : "@tmUser.UserName.replace("\\","\\\\")" ,  
            @:   "FullName"   : "@tmUser.FirstName @tmUser.LastName", 
            @:   "EMail"      : "@tmUser.EMail" ,
            @:   "Creation"   : "@tmUser.Stats.CreationDate.ToString("MMM/dd/yyyy")",
            @:   "UserGroup"  : "@tmUser.userGroup().str()",
            @:   "UserStatus" : "@tmUser.userStatus().str()",
            @:   "Activities" : "@tmUser.UserActivities.size()",
            @:   "Sessions"   : "@tmUser.Sessions.size()" } ,
        }
    ]
</script>
<p>Showing @tmUsers.size() out of @allUsers.size()</p>
<script type="text/javascript">
    
    
    var tbot = angular.module("tbot");
    
    tbot.controller("TMUsers", function($scope,$http, $timeout, $filter)
        { 
            _scope = $scope;
            $scope.count = 0;
            $scope.tmUserData = tmUserData;
                        
            $scope.cssForUserGroup = function(userGroup)
                {   
                    var baseCss = "label label-";
                    switch (userGroup.toLowerCase())
                    {
                         case "admin":
                            return baseCss + "danger";
                        case "editor":
                            return baseCss + "warning";
                        case "reader":
                            return baseCss + "primary";
                        default:
                            return baseCss + "info";        
                    }                    
                };
             $scope.cssForUserStatus = function(userStatus)
                {  
                    var baseCss = "label label-";
                    switch (userStatus.toLowerCase())
                    {
                         case "account expired":
                            return baseCss + "info";
                        case "disabled":
                            return baseCss + "danger";
                        case "enabled":
                            return baseCss + "success";
                        default:
                            return baseCss + "default";        
                    }                    
                };   
            

            
       
       });

</script>

<div ng-controller="TMUsers">
          

    user search<input ng-model="userSearch"/><br />
    email search<input ng-model="emailSearch"/><br />

    <table class="table table-striped table-condensed">
        <tr>
            <th>#</th> 
            <th class="col-sm-2">UserName</th>
            <th class="col-sm-2">FullName</th>
            <th class="col-sm-4">Email</th>   
            <th class="col-sm-1">Created</th>            
            <th class="col-sm-1">Group</th>
            <th class="col-sm-1">Status</th>
            <th                 >Activities</th>
            <th                 >Sessions</th>            
        </tr> 
        <tr ng-repeat ="tmUser in tmUserData | orderBy:'UserGroup':reverse=false | filter: { UserName : userSearch } | filter: { EMail : emailSearch }">
            <td>{{$index+1}}</td>
            <td><a ng-href="User_Edit?{{tmUser.UserName}}">{{tmUser.UserName}}</a> </td>                            
            <td>{{tmUser.FullName}}</td>
            <td>{{tmUser.EMail}}</td>
            <td>{{tmUser.Created}}</td>            
            <td><span ng-class="cssForUserGroup(tmUser.UserGroup)">{{tmUser.UserGroup}}</span></td>
            <td><span ng-class="cssForUserStatus(tmUser.UserStatus)">{{tmUser.UserStatus}}</span></td>              
            <td><a    ng-href="User_Activities?user={{tmUser.UserName}}&max=50">{{tmUser.Activities}}</a></td>
            <td>{{tmUser.Sessions}}</td>            
        </tr>
    </table>
</div>

@*

<table class="table table-striped table-condensed">
        <tr>
            <th>#</th> 
            <th>UserName</th>
            <th>FullName</th>
            <th>Email</th>   
            <th>Created</th>            
            <th>Group</th>
            <th>Status</th>
            <th>Activities</th>
            <th>Sessions</th>
           <!-- <th>User Id</th>
            <th>Actions</th>    -->     
        </tr>   
        @foreach (var tmUser in tmUsers)
        {
            var userGroup = tmUser.userGroup().str();
            var userStatus = tmUser.userStatus();
            <tr>
                <td>@(++count)</td>
                <td><a href="User_Edit?@tmUser.UserName">@tmUser.UserName</a> </td>                
                <td>@tmUser.FirstName @tmUser.LastName</td>
                <td>@tmUser.EMail</td>                
                <td>@tmUser.Stats.CreationDate.ToString("MMM/dd/yyyy")</td>                
                <td><span class="label label-@cssForUserGroup(userGroup)">@userGroup</span></td>
                <td><span class="label label-@cssForUserStatus(userStatus)">@userStatus</span></td>
                <td><a href="User_Activities?user=@tmUser.UserName&max=50">@tmUser.UserActivities.size()</a></td>
                <td>@tmUser.Sessions.size()</td>                
                <!--<td><a href="User_View?user=@tmUser.UserID"  >@tmUser.UserID</a></td>                
                <td>
                    <a href="User_Edit?@tmUser.UserName">edit user</a> | 
                    
                </td>-->

            </tr>
        }
    </table>
*@