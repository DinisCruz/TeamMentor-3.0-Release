@using System
@using System.Linq
@using FluentSharp.CoreLib
@using TeamMentor.CoreLib

@{
    if (Logger_Firebase.Current.isNull())
    {
        @: <h4>Firebase Offline Data</h4>
        @: <div class="alert alert-danger">
        @:     <b>Firebase Not configured</b>
        @: </div>
        return;
    }
}
@{
        
    
    var debugMessages = Logger_Firebase.Current.apiFirebase.OfflineQueue
                                                           .Select(submitData => (Log_Item)submitData.Data)
                                                           .Reverse()
                                                           .toList();
    var count          = debugMessages.size();
    
    Func<string, string> classForMessage = (type)=>
        {
            switch(type)
            {
                case "INFO":       
                    return "active";
                case "DEBUG":       
                    return "success";
                case "ERROR":
                case "EXCEPTION":       
                    return "danger";
                default:
                    return "";
                            
            }            
        };
}
<h4>Firebase Offline Data</h4>


<div class="alert alert-warning">
    <b>Debug Messages</b> - <a href="Firebase_Offline_Activities">Activities</a> - <a href="Firebase_Offline_RequestUrls">Request Urls</a>
</div>

<table class="table table-striped table-condensed">
    <tr>
        <th>#</th>            
        <th>Type</th>
        <th>When</th>            
        <th>Text</th>                    
    </tr>   
    @foreach (var debugMessage in debugMessages)
    {
        <tr  class ="@classForMessage(debugMessage.Type)">
            
            <td>@(count--)</td>
            <td>@debugMessage.Type</td>
            <td>@debugMessage.When.fromJsDate().ToString("HH:MM:ss")</td>
            <td>@debugMessage.Text</td>            
        </tr>
    }
</table>